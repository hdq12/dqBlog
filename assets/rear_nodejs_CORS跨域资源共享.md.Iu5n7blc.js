import{_ as s,c as a,o as i,V as n}from"./chunks/framework.szLWUyCm.js";const u=JSON.parse('{"title":"十二、CORS跨域资源共享","description":"","frontmatter":{},"headers":[],"relativePath":"rear/nodejs/CORS跨域资源共享.md","filePath":"rear/nodejs/CORS跨域资源共享.md","lastUpdated":null}'),e={name:"rear/nodejs/CORS跨域资源共享.md"},l=n(`<h1 id="十二、cors跨域资源共享" tabindex="-1">十二、CORS跨域资源共享 <a class="header-anchor" href="#十二、cors跨域资源共享" aria-label="Permalink to &quot;十二、CORS跨域资源共享&quot;">​</a></h1><h2 id="_1、接口的跨域问题" tabindex="-1">1、接口的跨域问题 <a class="header-anchor" href="#_1、接口的跨域问题" aria-label="Permalink to &quot;1、接口的跨域问题&quot;">​</a></h2><p>解决接口跨域问题的方案主要有俩种：</p><ul><li>CORS(主流的解决方案，推荐使用)</li><li>JSONP(有缺陷的解决方案，只支持GET请求)</li></ul><h2 id="_2、使用cors中间件解决跨域问题" tabindex="-1">2、使用cors中间件解决跨域问题 <a class="header-anchor" href="#_2、使用cors中间件解决跨域问题" aria-label="Permalink to &quot;2、使用cors中间件解决跨域问题&quot;">​</a></h2><p>cors是Express的一个第三方中间件。通过安装和配置cors中间件，可以很方便的解决跨域问题</p><ul><li>运行npm install cors安装中间件</li><li>使用const cors=require(&#39;cors&#39;)导入中间件</li><li>在路由之前调用app.use(cors())配置中间件</li></ul><p>注意：一定要在路由之前配置cors</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cors&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_3、什么是cors" tabindex="-1">3、什么是CORS <a class="header-anchor" href="#_3、什么是cors" aria-label="Permalink to &quot;3、什么是CORS&quot;">​</a></h2><p>CORS（跨域资源共享）由一系列HTTP响应头组成，这些HTTP响应头决定浏览器是否阻止前端js代码跨域获取资源</p><p>浏览器的同源安全政策默认会阻止网页”跨域“获取资源，但如果接口服务器配置了CORS相关的HTTP响应头，就可以解除浏览器端的跨域访问限制</p><h2 id="_4、cors响应头部-access-control-allow-origin" tabindex="-1">4、CORS响应头部 - Access-Control-Allow-Origin <a class="header-anchor" href="#_4、cors响应头部-access-control-allow-origin" aria-label="Permalink to &quot;4、CORS响应头部 - Access-Control-Allow-Origin&quot;">​</a></h2><p>响应头部中可以携带一个Access-Control-Allow-Origin字段</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Allow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;|*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数origin的值指定了允许访问该资源的外域URI</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//只允许来自http://itcast.cn的请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://itcast.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//允许来自任何域的请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_5、cors响应头部-access-control-allow-headers" tabindex="-1">5、CORS响应头部 - Access-Control-Allow-Headers <a class="header-anchor" href="#_5、cors响应头部-access-control-allow-headers" aria-label="Permalink to &quot;5、CORS响应头部 - Access-Control-Allow-Headers&quot;">​</a></h2><p>默认情况下，CORS仅支持客户端向服务器发送如下的9个请求头</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Accept</span></span>
<span class="line"><span>Accept-Language</span></span>
<span class="line"><span>Content-Language</span></span>
<span class="line"><span>DPR</span></span>
<span class="line"><span>Downlink</span></span>
<span class="line"><span>Save-Data</span></span>
<span class="line"><span>Viewport-Width</span></span>
<span class="line"><span>Width</span></span>
<span class="line"><span>Content-Type</span></span>
<span class="line"><span>值仅限于(</span></span>
<span class="line"><span>text/plain</span></span>
<span class="line"><span>multipart/form-data</span></span>
<span class="line"><span>application/x-www-form-urlencoded三者之一</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如果客户端向服务器发送了额外的请求头信息，则需要在服务端，通过Access-Control-Allow-Headers对额外的请求头进行声明，否则这次请求会失败</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//允许客户端向服务器发送Content-Type请求头和X-Custom-Header请求头</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//多个请求头之间用英文的逗号进行分割</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Headers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type,X-Custom-Header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_6、cors响应头部-access-control-allow-methods" tabindex="-1">6、CORS响应头部 - Access-Control-Allow-Methods <a class="header-anchor" href="#_6、cors响应头部-access-control-allow-methods" aria-label="Permalink to &quot;6、CORS响应头部 - Access-Control-Allow-Methods&quot;">​</a></h2><p>默认情况，CORS仅支持客户端发起的GET、POST、HEAD请求</p><p>如果客户端希望通过PUT、DELETE等方式请求服务器的资源，则需要在服务端，通过Access-Control-Allow-Methods来指明实际请求所允许使用的HTTP方法</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//只允许</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Methods&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST,GET,DELETE,HEAD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//全允许</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Methods&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_7、简单请求" tabindex="-1">7、简单请求 <a class="header-anchor" href="#_7、简单请求" aria-label="Permalink to &quot;7、简单请求&quot;">​</a></h2><p>同时满足俩大条件，就属于简单请求</p><ul><li>请求方式：GET,POST,HEAD三者之一</li><li>HTTP头部信息不超过上九种字段</li></ul><h2 id="_8、预检请求" tabindex="-1">8、预检请求 <a class="header-anchor" href="#_8、预检请求" aria-label="Permalink to &quot;8、预检请求&quot;">​</a></h2><p>符合任何一个条件的请求，都需要进行预检请求</p><ul><li>请求方式为GET、POST、HEAD之外的请求Method类型</li><li>请求头包含自定义头部字段</li><li>向服务器发送了application/json格式的数据</li></ul><h2 id="_9、简单请求和预检请求的区别" tabindex="-1">9、简单请求和预检请求的区别 <a class="header-anchor" href="#_9、简单请求和预检请求的区别" aria-label="Permalink to &quot;9、简单请求和预检请求的区别&quot;">​</a></h2><ul><li>简单请求的特点：客户端与服务器之间只会发生一次请求</li><li>预检请求的特点：客户端与服务器之间会发生俩次请求，OPTION预检请求超过之后，才会发起真正的请求</li></ul>`,35),p=[l];function t(r,h,o,c,d,k){return i(),a("div",null,p)}const g=s(e,[["render",t]]);export{u as __pageData,g as default};
