import{_ as s,c as i,o as n,V as a}from"./chunks/framework.szLWUyCm.js";const g=JSON.parse('{"title":"一、python3基础语法","description":"","frontmatter":{},"headers":[],"relativePath":"rear/python/python3基础语法.md","filePath":"rear/python/python3基础语法.md","lastUpdated":null}'),t={name:"rear/python/python3基础语法.md"},e=a(`<h1 id="一、python3基础语法" tabindex="-1">一、python3基础语法 <a class="header-anchor" href="#一、python3基础语法" aria-label="Permalink to &quot;一、python3基础语法&quot;">​</a></h1><h2 id="_1、注释" tabindex="-1">1、注释 <a class="header-anchor" href="#_1、注释" aria-label="Permalink to &quot;1、注释&quot;">​</a></h2><blockquote><p>Python中单行注释以 <strong>#</strong> 开头</p></blockquote><ul><li><code>#</code>注释</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第一个注释</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Python!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第二个注释</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>&#39;&#39;&#39;</code>注释</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">第三注释</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">第四注释</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Python!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2、行与缩进" tabindex="-1">2、行与缩进 <a class="header-anchor" href="#_2、行与缩进" aria-label="Permalink to &quot;2、行与缩进&quot;">​</a></h2><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;True&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;False&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_3、多行语句" tabindex="-1">3、多行语句 <a class="header-anchor" href="#_3、多行语句" aria-label="Permalink to &quot;3、多行语句&quot;">​</a></h2><blockquote><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 *<em>*</em> 来实现多行语句，例如：</p></blockquote><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item_one </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        item_two </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        item_three</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_4、数字-number-类型" tabindex="-1">4、数字（Number）类型 <a class="header-anchor" href="#_4、数字-number-类型" aria-label="Permalink to &quot;4、数字（Number）类型&quot;">​</a></h2><blockquote><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p></blockquote><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li><strong>bool</strong> (布尔), 如 True。</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h2 id="_5、字符串-string" tabindex="-1">5、字符串（String） <a class="header-anchor" href="#_5、字符串-string" aria-label="Permalink to &quot;5、字符串（String）&quot;">​</a></h2><ul><li>Python 中单引号 <code>&#39;</code> 和双引号 <code>&quot;</code> 使用完全相同。</li><li>使用三引号(<code>&#39;&#39;&#39;</code> 或<code> &quot;&quot;&quot;</code>)可以指定一个多行字符串。</li><li>转义符 <code>\\</code>。</li><li>反斜杠可以用来转义，使用 <code>r</code> 可以让反斜杠不发生转义。 如 <strong><code>r&quot;this is a line with \\n&quot;</code></strong> 则 <strong><code>\\n</code></strong> 会显示，并不是换行。</li><li>按字面意义级联字符串，如 <strong><code>&quot;this &quot; &quot;is &quot; &quot;string&quot;</code></strong> 会被自动转换为 <strong><code>this is string</code></strong>。</li><li>字符串可以用 <strong><code>+</code></strong> 运算符连接在一起，用 <strong><code>*</code></strong> 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 <strong><code>0</code></strong> 开始，从右往左以 <strong><code>-1</code></strong> 开始。</li><li>Python 中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：<strong><code>变量[头下标:尾下标:步长]</code></strong></li></ul><h2 id="_6、print输出" tabindex="-1">6、print输出 <a class="header-anchor" href="#_6、print输出" aria-label="Permalink to &quot;6、print输出&quot;">​</a></h2><blockquote><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong><code>end=&quot;&quot;</code></strong>：</p></blockquote><h2 id="_7、import-与-from-import" tabindex="-1">7、import 与 from...import <a class="header-anchor" href="#_7、import-与-from-import" aria-label="Permalink to &quot;7、import 与 from...import&quot;">​</a></h2><ul><li><p>在 python 用 <strong><code>import</code></strong> 或者 <strong><code>from...import</code></strong> 来导入相应的模块。</p></li><li><p>将整个模块(somemodule)导入，格式为： <strong><code>import somemodule</code></strong></p></li><li><p>从某个模块中导入某个函数,格式为： <strong><code>from somemodule import somefunction</code></strong></p></li><li><p>从某个模块中导入多个函数,格式为： <strong><code>from somemodule import firstfunc, secondfunc, thirdfunc</code></strong></p></li><li><p>将某个模块中的全部函数导入，格式为： <strong><code>from somemodule import </code></strong></p></li></ul>`,22),o=[e];function l(r,p,h,d,c,k){return n(),i("div",null,o)}const m=s(t,[["render",l]]);export{g as __pageData,m as default};
