import{_ as t,c as e,o as d,V as l}from"./chunks/framework.szLWUyCm.js";const p=JSON.parse('{"title":"十六、OS文件目录方法","description":"","frontmatter":{},"headers":[],"relativePath":"rear/python/OS文件目录方法.md","filePath":"rear/python/OS文件目录方法.md","lastUpdated":null}'),o={name:"rear/python/OS文件目录方法.md"},s=l('<h1 id="十六、os文件目录方法" tabindex="-1">十六、OS文件目录方法 <a class="header-anchor" href="#十六、os文件目录方法" aria-label="Permalink to &quot;十六、OS文件目录方法&quot;">​</a></h1><p><code>os</code> 模块提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>os.access(path, mode)</code></td><td style="text-align:left;">检验权限模式</td></tr><tr><td style="text-align:left;"><code>os.chdir(path)</code></td><td style="text-align:left;">改变当前工作目录</td></tr><tr><td style="text-align:left;"><code>os.chflags(path, flags)</code></td><td style="text-align:left;">设置路径的标记为数字标记</td></tr><tr><td style="text-align:left;"><code>os.chmod(path, mode)</code></td><td style="text-align:left;">更改权限</td></tr><tr><td style="text-align:left;"><code>os.chown(path, uid, gid)</code></td><td style="text-align:left;">更改文件所有者</td></tr><tr><td style="text-align:left;"><code>os.chroot(path)</code></td><td style="text-align:left;">改变当前进程的根目录</td></tr><tr><td style="text-align:left;"><code>os.close(fd)</code></td><td style="text-align:left;">关闭文件描述符 fd</td></tr><tr><td style="text-align:left;"><code>os.closerange(fd_low, fd_high)</code></td><td style="text-align:left;">关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略</td></tr><tr><td style="text-align:left;"><code>os.dup(fd)</code></td><td style="text-align:left;">复制文件描述符 fd</td></tr><tr><td style="text-align:left;"><code>os.dup2(fd, fd2)</code></td><td style="text-align:left;">将一个文件描述符 fd 复制到另一个 fd2</td></tr><tr><td style="text-align:left;"><code>os.fchdir(fd)</code></td><td style="text-align:left;">通过文件描述符改变当前工作目录</td></tr><tr><td style="text-align:left;"><code>os.fchmod(fd, mode)</code></td><td style="text-align:left;">改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</td></tr><tr><td style="text-align:left;"><code>os.fchown(fd, uid, gid)</code></td><td style="text-align:left;">修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。</td></tr><tr><td style="text-align:left;"><code>os.fdatasync(fd)</code></td><td style="text-align:left;">强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。</td></tr><tr><td style="text-align:left;"><code>os.fdopen(fd[, mode[, bufsize\\]])</code></td><td style="text-align:left;">通过文件描述符 fd 创建一个文件对象，并返回这个文件对象</td></tr><tr><td style="text-align:left;"><code>os.fpathconf(fd, name)</code></td><td style="text-align:left;">返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。</td></tr><tr><td style="text-align:left;"><code>os.fstat(fd)</code></td><td style="text-align:left;">返回文件描述符fd的状态，像stat()。</td></tr><tr><td style="text-align:left;"><code>os.fstatvfs(fd)</code></td><td style="text-align:left;">返回包含文件描述符fd的文件的文件系统的信息，Python 3.3 相等于 statvfs()。</td></tr><tr><td style="text-align:left;"><code>os.fsync(fd)</code></td><td style="text-align:left;">强制将文件描述符为fd的文件写入硬盘。</td></tr><tr><td style="text-align:left;"><code>os.ftruncate(fd, length)</code></td><td style="text-align:left;">裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。</td></tr><tr><td style="text-align:left;"><code>os.getcwd()</code></td><td style="text-align:left;">返回当前工作目录</td></tr><tr><td style="text-align:left;"><code>os.getcwdb()</code></td><td style="text-align:left;">返回一个当前工作目录的Unicode对象</td></tr><tr><td style="text-align:left;"><code>os.isatty(fd)</code></td><td style="text-align:left;">如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</td></tr><tr><td style="text-align:left;"><code>os.lchflags(path, flags)</code></td><td style="text-align:left;">设置路径的标记为数字标记，类似 chflags()，但是没有软链接</td></tr><tr><td style="text-align:left;"><code>os.lchmod(path, mode)</code></td><td style="text-align:left;">修改连接文件权限</td></tr><tr><td style="text-align:left;"><code>os.lchown(path, uid, gid)</code></td><td style="text-align:left;">更改文件所有者，类似 chown，但是不追踪链接。</td></tr><tr><td style="text-align:left;"><code>os.link(src, dst)</code></td><td style="text-align:left;">创建硬链接，名为参数 dst，指向参数 src</td></tr><tr><td style="text-align:left;"><code>os.listdir(path)</code></td><td style="text-align:left;">返回path指定的文件夹包含的文件或文件夹的名字的列表。</td></tr><tr><td style="text-align:left;"><code>os.lseek(fd, pos, how)</code></td><td style="text-align:left;">设置文件描述符 fd当前位置为pos, how方式修改: SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始. 在unix，Windows中有效</td></tr><tr><td style="text-align:left;"><code>os.lstat(path)</code></td><td style="text-align:left;">像stat(),但是没有软链接</td></tr><tr><td style="text-align:left;"><code>os.major(device)</code></td><td style="text-align:left;">从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</td></tr><tr><td style="text-align:left;"><code>os.makedev(major, minor)</code></td><td style="text-align:left;">以major和minor设备号组成一个原始设备号</td></tr><tr><td style="text-align:left;"><code>os.makedirs(path[, mode\\])</code></td><td style="text-align:left;">递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。</td></tr><tr><td style="text-align:left;"><code>os.minor(device)</code></td><td style="text-align:left;">从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</td></tr><tr><td style="text-align:left;"><code>os.mkdir(path[, mode\\])</code></td><td style="text-align:left;">以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。</td></tr><tr><td style="text-align:left;"><code>os.mkfifo(path[, mode\\])</code></td><td style="text-align:left;">创建命名管道，mode 为数字，默认为 0666 (八进制)</td></tr><tr><td style="text-align:left;"><code>os.mknod(filename[, mode=0600, device\\])</code></td><td style="text-align:left;">创建一个名为filename文件系统节点（文件，设备特别文件或者命名pipe）。</td></tr><tr><td style="text-align:left;"><code>os.open(file, flags[, mode\\])</code></td><td style="text-align:left;">打开一个文件，并且设置需要的打开选项，mode参数是可选的</td></tr><tr><td style="text-align:left;"><code>os.openpty()</code></td><td style="text-align:left;">打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</td></tr><tr><td style="text-align:left;"><code>os.pathconf(path, name)</code></td><td style="text-align:left;">返回相关文件的系统配置信息。</td></tr><tr><td style="text-align:left;"><code>os.pipe()</code></td><td style="text-align:left;">创建一个管道. 返回一对文件描述符(r, w) 分别为读和写</td></tr><tr><td style="text-align:left;"><code>os.popen(command[, mode[, bufsize\\]])</code></td><td style="text-align:left;">从一个 command 打开一个管道</td></tr><tr><td style="text-align:left;"><code>os.read(fd, n)</code></td><td style="text-align:left;">从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</td></tr><tr><td style="text-align:left;"><code>os.readlink(path)</code></td><td style="text-align:left;">返回软链接所指向的文件</td></tr><tr><td style="text-align:left;"><code>os.remove(path)</code></td><td style="text-align:left;">删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。</td></tr><tr><td style="text-align:left;"><code>os.removedirs(path)</code></td><td style="text-align:left;">递归删除目录。</td></tr><tr><td style="text-align:left;"><code>os.rename(src, dst)</code></td><td style="text-align:left;">重命名文件或目录，从 src 到 dst</td></tr><tr><td style="text-align:left;"><code>os.renames(old, new)</code></td><td style="text-align:left;">递归地对目录进行更名，也可以对文件进行更名。</td></tr><tr><td style="text-align:left;"><code>os.rmdir(path)</code></td><td style="text-align:left;">删除path指定的空目录，如果目录非空，则抛出一个OSError异常。</td></tr><tr><td style="text-align:left;"><code>os.stat(path)</code></td><td style="text-align:left;">获取path指定的路径的信息，功能等同于C API中的stat()系统调用。</td></tr><tr><td style="text-align:left;"><code>os.stat_float_times([newvalue\\])</code></td><td style="text-align:left;">决定stat_result是否以float对象显示时间戳</td></tr><tr><td style="text-align:left;"><code>os.statvfs(path)</code></td><td style="text-align:left;">获取指定路径的文件系统统计信息</td></tr><tr><td style="text-align:left;"><code>os.symlink(src, dst)</code></td><td style="text-align:left;">创建一个软链接</td></tr><tr><td style="text-align:left;"><code>os.tcgetpgrp(fd)</code></td><td style="text-align:left;">返回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组</td></tr><tr><td style="text-align:left;"><code>os.tcsetpgrp(fd, pg)</code></td><td style="text-align:left;">设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</td></tr><tr><td style="text-align:left;"><code>os.ttyname(fd)</code></td><td style="text-align:left;">返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</td></tr><tr><td style="text-align:left;"><code>os.unlink(path)</code></td><td style="text-align:left;">删除文件路径</td></tr><tr><td style="text-align:left;">`os.utime(path, times)</td><td style="text-align:left;">返回指定的path文件的访问和修改的时间。</td></tr><tr><td style="text-align:left;"><code>os.walk(top[, topdown=True[, onerror=None[, followlinks=False\\]]])</code></td><td style="text-align:left;">输出在文件夹中的文件名通过在树中游走，向上或者向下。</td></tr><tr><td style="text-align:left;"><code>os.write(fd, str)</code></td><td style="text-align:left;">写入字符串到文件描述符 fd中. 返回实际写入的字符串长度</td></tr><tr><td style="text-align:left;"><code>os.path 模块</code></td><td style="text-align:left;">获取文件的属性信息。</td></tr><tr><td style="text-align:left;"><code>os.pardir()</code></td><td style="text-align:left;">获取当前目录的父目录，以字符串形式显示目录名。</td></tr><tr><td style="text-align:left;"><code>os.replace()</code></td><td style="text-align:left;">重命名文件或目录。</td></tr></tbody></table>',3),a=[s];function f(r,n,i,c,g,y){return d(),e("div",null,a)}const h=t(o,[["render",f]]);export{p as __pageData,h as default};
