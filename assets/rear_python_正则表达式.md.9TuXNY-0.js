import{_ as t,c as e,o as l,V as s}from"./chunks/framework.szLWUyCm.js";const f=JSON.parse('{"title":"一、正则表达式","description":"","frontmatter":{},"headers":[],"relativePath":"rear/python/正则表达式.md","filePath":"rear/python/正则表达式.md","lastUpdated":null}'),d={name:"rear/python/正则表达式.md"},a=s(`<h1 id="一、正则表达式" tabindex="-1">一、正则表达式 <a class="header-anchor" href="#一、正则表达式" aria-label="Permalink to &quot;一、正则表达式&quot;">​</a></h1><p>在 Python 中，使用 <strong><code>re</code></strong> 模块来处理正则表达式</p><h2 id="_1、match函数" tabindex="-1">1、match函数 <a class="header-anchor" href="#_1、match函数" aria-label="Permalink to &quot;1、match函数&quot;">​</a></h2><p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 None。</p><p><strong>函数语法</strong>：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">pattern</td><td style="text-align:left;">匹配的正则表达式</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">要匹配的字符串</td></tr><tr><td style="text-align:left;">flags</td><td style="text-align:left;">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</td></tr></tbody></table><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.match(pattern, string, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2、search方法" tabindex="-1">2、search方法 <a class="header-anchor" href="#_2、search方法" aria-label="Permalink to &quot;2、search方法&quot;">​</a></h2><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p><p><strong>函数语法：</strong></p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">pattern</td><td style="text-align:left;">匹配的正则表达式</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">要匹配的字符串</td></tr><tr><td style="text-align:left;">flags</td><td style="text-align:left;">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</td></tr></tbody></table><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.search(pattern, string, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3、findall" tabindex="-1">3、findall <a class="header-anchor" href="#_3、findall" aria-label="Permalink to &quot;3、findall&quot;">​</a></h2><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果有多个匹配模式，则返回元组列表，如果没有找到匹配的，则返回空列表。</p><p><strong>注意：</strong> match 和 search 是匹配一次 ，findall 匹配所有。</p><p>语法格式为：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.findall(pattern, string, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern.findall(string[, pos[, endpos]])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>参数：</p><ul><li><strong>pattern</strong> 匹配模式。</li><li><strong>string</strong> 待匹配的字符串。</li><li><strong>pos</strong> 可选参数，指定字符串的起始位置，默认为 0。</li><li><strong>endpos</strong> 可选参数，指定字符串的结束位置，默认为字符串的长度。</li></ul><h2 id="_4、split" tabindex="-1">4、split <a class="header-anchor" href="#_4、split" aria-label="Permalink to &quot;4、split&quot;">​</a></h2><p><code>split</code> 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.split(pattern, string[, maxsplit=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, flags=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">pattern</td><td style="text-align:left;">匹配的正则表达式</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">要匹配的字符串。</td></tr><tr><td style="text-align:left;">maxsplit</td><td style="text-align:left;">分割次数，maxsplit=1 分割一次，默认为 0，不限制次数。</td></tr><tr><td style="text-align:left;">flags</td><td style="text-align:left;">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td></tr></tbody></table><h2 id="_5、检索和替换" tabindex="-1">5、检索和替换 <a class="header-anchor" href="#_5、检索和替换" aria-label="Permalink to &quot;5、检索和替换&quot;">​</a></h2><p>Python 的re模块提供了re.sub用于替换字符串中的匹配项。</p><p>语法：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.sub(pattern, repl, string, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数：</p><ul><li>pattern : 正则中的模式字符串。</li><li>repl : 替换的字符串，也可为一个函数。</li><li>string : 要被查找替换的原始字符串。</li><li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li><li>flags : 编译时用的匹配模式，数字形式。</li></ul><p>前三个为必选参数，后两个为可选参数。</p><h2 id="_6、正则表达式模式" tabindex="-1">6、正则表达式模式 <a class="header-anchor" href="#_6、正则表达式模式" aria-label="Permalink to &quot;6、正则表达式模式&quot;">​</a></h2><p>模式字符串使用特殊的语法来表示一个正则表达式。</p><p>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</p><p>多数字母和数字前加一个反斜杠时会拥有不同的含义。</p><p>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</p><p>反斜杠本身需要使用反斜杠转义。</p><p>由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 <strong>r&#39;\\t&#39;</strong>，等价于 <strong>\\t</strong> )匹配相应的特殊字符。</p><p>下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p><table><thead><tr><th style="text-align:left;">模式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>^</code></td><td style="text-align:left;">匹配字符串的开头</td></tr><tr><td style="text-align:left;"><code>$</code></td><td style="text-align:left;">匹配字符串的末尾。</td></tr><tr><td style="text-align:left;"><code>.</code></td><td style="text-align:left;">匹配任意字符，除了换行符，当<code>re.DOTALL</code>标记被指定时，则可以匹配包括换行符的任意字符。</td></tr><tr><td style="text-align:left;"><code>[...]</code></td><td style="text-align:left;">用来表示一组字符,单独列出：<code>[amk]</code> 匹配 <code>&#39;a&#39;</code>，<code>&#39;m&#39;</code>或<code>&#39;k&#39;</code></td></tr><tr><td style="text-align:left;"><code>[^...]</code></td><td style="text-align:left;">不在[]中的字符：<code>[^abc]</code> 匹配除了a,b,c之外的字符。</td></tr><tr><td style="text-align:left;"><code>re*</code></td><td style="text-align:left;">匹配0个或多个的表达式。</td></tr><tr><td style="text-align:left;"><code>re+</code></td><td style="text-align:left;">匹配1个或多个的表达式。</td></tr><tr><td style="text-align:left;"><code>re?</code></td><td style="text-align:left;">匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td style="text-align:left;"><code>re{ n}</code></td><td style="text-align:left;">匹配n个前面表达式。例如，&quot;<code>o{2}</code>&quot;不能匹配<code>&quot;Bob&quot;</code>中的<code>&quot;o&quot;</code>，但是能匹配<code>&quot;food&quot;</code>中的两个<code>o</code>。</td></tr><tr><td style="text-align:left;"><code>re{ n,}</code></td><td style="text-align:left;">精确匹配n个前面表达式。例如，<code>&quot;o{2,}&quot;</code>不能匹配<code>&quot;Bob&quot;</code>中的<code>&quot;o&quot;</code>，但能匹配<code>&quot;foooood&quot;</code>中的所有<code>o</code>。<code>&quot;o{1,}&quot;</code>等价于<code>&quot;o+&quot;</code>。<code>&quot;o{0,}&quot;</code>则等价于<code>&quot;o*&quot;</code>。</td></tr><tr><td style="text-align:left;"><code>re{ n, m}</code></td><td style="text-align:left;">匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td></tr><tr><td style="text-align:left;"><code>a|b</code></td><td style="text-align:left;">匹配a或b</td></tr><tr><td style="text-align:left;"><code>(re)</code></td><td style="text-align:left;">匹配括号内的表达式，也表示一个组</td></tr><tr><td style="text-align:left;"><code>(?imx)</code></td><td style="text-align:left;">正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</td></tr><tr><td style="text-align:left;"><code>(?-imx)</code></td><td style="text-align:left;">正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</td></tr><tr><td style="text-align:left;"><code>(?: re)</code></td><td style="text-align:left;">类似 (...), 但是不表示一个组</td></tr><tr><td style="text-align:left;"><code>(?imx: re)</code></td><td style="text-align:left;">在括号中使用i, m, 或 x 可选标志</td></tr><tr><td style="text-align:left;"><code>(?-imx: re)</code></td><td style="text-align:left;">在括号中不使用i, m, 或 x 可选标志</td></tr><tr><td style="text-align:left;"><code>(?#...)</code></td><td style="text-align:left;">注释.</td></tr><tr><td style="text-align:left;"><code>(?= re)</code></td><td style="text-align:left;">前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td></tr><tr><td style="text-align:left;"><code>(?! re)</code></td><td style="text-align:left;">前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。</td></tr><tr><td style="text-align:left;"><code>(?&gt; re)</code></td><td style="text-align:left;">匹配的独立模式，省去回溯。</td></tr><tr><td style="text-align:left;"><code>\\w</code></td><td style="text-align:left;">匹配数字字母下划线</td></tr><tr><td style="text-align:left;"><code>\\W</code></td><td style="text-align:left;">匹配非数字字母下划线</td></tr><tr><td style="text-align:left;"><code>\\s</code></td><td style="text-align:left;">匹配任意空白字符，等价于 <code>[\\t\\n\\r\\f]</code>。</td></tr><tr><td style="text-align:left;"><code>\\S</code></td><td style="text-align:left;">匹配任意非空字符</td></tr><tr><td style="text-align:left;"><code>\\d</code></td><td style="text-align:left;">匹配任意数字，等价于 <code>[0-9]</code>。</td></tr><tr><td style="text-align:left;"><code>\\D</code></td><td style="text-align:left;">匹配任意非数字</td></tr><tr><td style="text-align:left;"><code>\\A</code></td><td style="text-align:left;">匹配字符串开始</td></tr><tr><td style="text-align:left;"><code>\\Z</code></td><td style="text-align:left;">匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td></tr><tr><td style="text-align:left;"><code>\\z</code></td><td style="text-align:left;">匹配字符串结束</td></tr><tr><td style="text-align:left;"><code>\\G</code></td><td style="text-align:left;">匹配最后匹配完成的位置。</td></tr><tr><td style="text-align:left;"><code>\\b</code></td><td style="text-align:left;">匹配一个单词边界，也就是指单词和空格间的位置。例如， <code>&#39;er\\b&#39;</code> 可以匹配&quot;never&quot; 中的 &#39;er&#39;，但不能匹配 <code>&quot;verb&quot;</code>中的 <code>&#39;er&#39;</code>。</td></tr><tr><td style="text-align:left;"><code>\\B</code></td><td style="text-align:left;">匹配非单词边界。<code>&#39;er\\B&#39;</code> 能匹配 <code>&quot;verb&quot;</code> 中的 <code>&#39;er&#39;</code>，但不能匹配 <code>&quot;never&quot;</code> 中的 <code>&#39;er&#39;</code>。</td></tr><tr><td style="text-align:left;"><code>\\n</code>, <code>\\t</code>, 等。</td><td style="text-align:left;">匹配一个换行符。匹配一个制表符, 等</td></tr><tr><td style="text-align:left;"><code>\\1</code>...<code>\\9</code></td><td style="text-align:left;">匹配第n个分组的内容。</td></tr><tr><td style="text-align:left;"><code>\\10</code></td><td style="text-align:left;">匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式</td></tr></tbody></table>`,40),i=[a];function n(r,o,c,p,h,g){return l(),e("div",null,i)}const x=t(d,[["render",n]]);export{f as __pageData,x as default};
