import{_ as t,c as e,o as l,V as s}from"./chunks/framework.szLWUyCm.js";const k=JSON.parse('{"title":"四、Python3 字符串","description":"","frontmatter":{},"headers":[],"relativePath":"rear/python/字符串String.md","filePath":"rear/python/字符串String.md","lastUpdated":null}'),d={name:"rear/python/字符串String.md"},i=s(`<h1 id="四、python3-字符串" tabindex="-1">四、Python3 字符串 <a class="header-anchor" href="#四、python3-字符串" aria-label="Permalink to &quot;四、Python3 字符串&quot;">​</a></h1><h2 id="_1、如何创建字符串" tabindex="-1">1、如何创建字符串 <a class="header-anchor" href="#_1、如何创建字符串" aria-label="Permalink to &quot;1、如何创建字符串&quot;">​</a></h2><blockquote><p>使用引号<code>&#39;</code>或 <strong><code>&quot;</code></strong> 来创建字符串</p></blockquote><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Runoob&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_2、字符和字符串的关系" tabindex="-1">2、字符和字符串的关系 <a class="header-anchor" href="#_2、字符和字符串的关系" aria-label="Permalink to &quot;2、字符和字符串的关系&quot;">​</a></h2><blockquote><p>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用</p></blockquote><h2 id="_3、截取字符串访问子串" tabindex="-1">3、截取字符串访问子串 <a class="header-anchor" href="#_3、截取字符串访问子串" aria-label="Permalink to &quot;3、截取字符串访问子串&quot;">​</a></h2><blockquote><p>访问子字符串，可以使用方括号 <strong><code>[]</code></strong> 来截取字符串，字符串的截取的语法格式如下：</p></blockquote><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">变量[头下标:尾下标]    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#（不包含尾下标）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_4、三引号" tabindex="-1">4、三引号 <a class="header-anchor" href="#_4、三引号" aria-label="Permalink to &quot;4、三引号&quot;">​</a></h2><blockquote><p>三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符</p></blockquote><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">para_str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;这是一个多行字符串的实例</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">多行字符串可以使用制表符</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TAB ( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> )。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">也可以使用换行符 [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ]。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (para_str)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这是一个多行字符串的实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">多行字符串可以使用制表符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TAB (    )。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">也可以使用换行符 [ </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_5、f-string" tabindex="-1">5、f-string <a class="header-anchor" href="#_5、f-string" aria-label="Permalink to &quot;5、f-string&quot;">​</a></h2><blockquote><p><code>f-string</code> 称之为字面量格式化字符串，是新的格式化字符串的语法。</p></blockquote><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Runoob&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换变量   &#39;Hello Runoob&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用表达式		&#39;3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Runoob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;www.runoob.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#&#39;Runoob: www.runoob.com&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>用了这种方式明显更简单了，不用再去判断使用 %s，还是 %d。</p></blockquote><h2 id="_6、-转义字符" tabindex="-1">6、 转义字符 <a class="header-anchor" href="#_6、-转义字符" aria-label="Permalink to &quot;6、 转义字符&quot;">​</a></h2><p>在需要在字符中使用特殊字符时，python 用反斜杠<code>/</code>转义字符。如下表：</p><table><thead><tr><th style="text-align:left;">转义字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>\\</code>(在行尾时)</td><td style="text-align:left;">续行符</td></tr><tr><td style="text-align:left;"><code>\\\\</code></td><td style="text-align:left;">反斜杠符号</td></tr><tr><td style="text-align:left;"><code>\\&#39;</code></td><td style="text-align:left;">单引号</td></tr><tr><td style="text-align:left;"><code>\\&quot;</code></td><td style="text-align:left;">双引号</td></tr><tr><td style="text-align:left;"><code>\\a</code></td><td style="text-align:left;">响铃</td></tr><tr><td style="text-align:left;"><code>\\b</code></td><td style="text-align:left;">退格(Backspace)</td></tr><tr><td style="text-align:left;"><code>\\000</code></td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;"><code>\\n</code></td><td style="text-align:left;">换行</td></tr><tr><td style="text-align:left;"><code>\\v</code></td><td style="text-align:left;">纵向制表符</td></tr><tr><td style="text-align:left;"><code>\\t</code></td><td style="text-align:left;">横向制表符</td></tr><tr><td style="text-align:left;"><code>\\r</code></td><td style="text-align:left;">回车，将 <strong>\\r</strong> 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 <strong>\\r</strong> 后面的内容完全替换完成。</td></tr><tr><td style="text-align:left;"><code>\\f</code></td><td style="text-align:left;">换页</td></tr><tr><td style="text-align:left;"><code>\\yyy</code></td><td style="text-align:left;">八进制数，y 代表 0~7 的字符，例如：\\012 代表换行。</td></tr><tr><td style="text-align:left;"><code>\\xyy</code></td><td style="text-align:left;">十六进制数，以 \\x 开头，y 代表的字符，例如：\\x0a 代表换行</td></tr><tr><td style="text-align:left;"><code>\\other</code></td><td style="text-align:left;">其它的字符以普通格式输出</td></tr></tbody></table><h2 id="_7、字符串运算符" tabindex="-1">7、字符串运算符 <a class="header-anchor" href="#_7、字符串运算符" aria-label="Permalink to &quot;7、字符串运算符&quot;">​</a></h2><p>下表实例变量 a 值为字符串 &quot;Hello&quot;，b 变量值为 &quot;Python&quot;：</p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;">字符串连接</td><td style="text-align:left;"><code>a + b</code> 输出结果： <code>HelloPython</code></td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">重复输出字符串</td><td style="text-align:left;"><code>a*2</code> 输出结果：<code>HelloHello</code></td></tr><tr><td style="text-align:left;"><code>[]</code></td><td style="text-align:left;">通过索引获取字符串中字符</td><td style="text-align:left;"><code>a[1]</code> 输出结果 <strong><code>e</code></strong></td></tr><tr><td style="text-align:left;"><code>[ : ]</code></td><td style="text-align:left;">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</td><td style="text-align:left;"><code>a[1:4]</code> 输出结果 <strong><code>ell</code></strong></td></tr><tr><td style="text-align:left;"><code>in</code></td><td style="text-align:left;">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td style="text-align:left;"><strong><code>&#39;H&#39; in a</code></strong> 输出结果 <code>True</code></td></tr><tr><td style="text-align:left;"><code>not in</code></td><td style="text-align:left;">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td style="text-align:left;"><strong><code>&#39;M&#39; not in a</code></strong> 输出结果<code> True</code></td></tr><tr><td style="text-align:left;"><code>r/R</code></td><td style="text-align:left;">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。</td><td style="text-align:left;"><code>print( r&#39;\\n&#39; ) print( R&#39;\\n&#39; )</code></td></tr><tr><td style="text-align:left;"><code>%</code></td><td style="text-align:left;">格式字符串</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="_8、字符串格式化" tabindex="-1">8、字符串格式化 <a class="header-anchor" href="#_8、字符串格式化" aria-label="Permalink to &quot;8、字符串格式化&quot;">​</a></h2><p>python字符串格式化符号:</p><table><thead><tr><th style="text-align:left;">符 号</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>%c</code></td><td style="text-align:left;">格式化字符及其ASCII码</td></tr><tr><td style="text-align:left;"><code>%s</code></td><td style="text-align:left;">格式化字符串</td></tr><tr><td style="text-align:left;"><code>%d</code></td><td style="text-align:left;">格式化整数</td></tr><tr><td style="text-align:left;"><code>%u</code></td><td style="text-align:left;">格式化无符号整型</td></tr><tr><td style="text-align:left;"><code>%o</code></td><td style="text-align:left;">格式化无符号八进制数</td></tr><tr><td style="text-align:left;"><code>%x</code></td><td style="text-align:left;">格式化无符号十六进制数</td></tr><tr><td style="text-align:left;"><code>%X</code></td><td style="text-align:left;">格式化无符号十六进制数（大写）</td></tr><tr><td style="text-align:left;"><code>%f</code></td><td style="text-align:left;">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td style="text-align:left;"><code>%e</code></td><td style="text-align:left;">用科学计数法格式化浮点数</td></tr><tr><td style="text-align:left;"><code>%E</code></td><td style="text-align:left;">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td style="text-align:left;"><code>%g</code></td><td style="text-align:left;">%f和%e的简写</td></tr><tr><td style="text-align:left;"><code>%G</code></td><td style="text-align:left;">%f 和 %E 的简写</td></tr><tr><td style="text-align:left;"><code>%p</code></td><td style="text-align:left;">用十六进制数格式化变量的地址</td></tr></tbody></table><p>格式化操作符辅助指令:</p><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">定义宽度或者小数点精度</td></tr><tr><td style="text-align:left;"><code>-</code></td><td style="text-align:left;">用做左对齐</td></tr><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;">在正数前面显示加号( + )</td></tr><tr><td style="text-align:left;"><code>&lt;sp&gt;</code></td><td style="text-align:left;">在正数前面显示空格</td></tr><tr><td style="text-align:left;"><code>#</code></td><td style="text-align:left;">在八进制数前面显示零(&#39;0&#39;)，在十六进制前面显示&#39;0x&#39;或者&#39;0X&#39;(取决于用的是&#39;x&#39;还是&#39;X&#39;)</td></tr><tr><td style="text-align:left;"><code>0</code></td><td style="text-align:left;">显示的数字前面填充&#39;0&#39;而不是默认的空格</td></tr><tr><td style="text-align:left;"><code>%</code></td><td style="text-align:left;">&#39;%%&#39;输出一个单一的&#39;%&#39;</td></tr><tr><td style="text-align:left;"><code>(var)</code></td><td style="text-align:left;">映射变量(字典参数)</td></tr><tr><td style="text-align:left;"><code>m.n.</code></td><td style="text-align:left;">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><h2 id="_9、字符串内建函数" tabindex="-1">9、字符串内建函数 <a class="header-anchor" href="#_9、字符串内建函数" aria-label="Permalink to &quot;9、字符串内建函数&quot;">​</a></h2><p>Python 的字符串常用内建函数如下：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>capitalize()</code></td><td style="text-align:left;">将字符串的<code>第一个字符转换为大写</code></td></tr><tr><td style="text-align:left;"><code>center(width, fillchar)</code></td><td style="text-align:left;">返回一个指定的宽度 <code>width</code> 居中的字符串，<code>fillchar</code> 为填充的字符，默认为空格。</td></tr><tr><td style="text-align:left;"><code>count(str, beg= 0,end=len(string))</code></td><td style="text-align:left;">返回 <code>str</code> 在 <code>string</code> 里面出现的次数，如果 <code>beg</code> 或者 <code>end</code> 指定则返回指定范围内 str 出现的次数</td></tr><tr><td style="text-align:left;"><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code></td><td style="text-align:left;">Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 <code>decode()</code> 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 <code>str.encode()</code> 来编码返回。</td></tr><tr><td style="text-align:left;"><code>encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code></td><td style="text-align:left;">以 <code>encoding</code> 指定的<code>编码格式</code>编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是&#39;ignore&#39;或者&#39;replace&#39;</td></tr><tr><td style="text-align:left;"><code>endswith(suffix, beg=0, end=len(string))</code></td><td style="text-align:left;">检查字符串<code>是否以 suffix 结束</code>，如果 <code>beg</code> 或者 <code>end</code> 指定则检查指定的范围内是否以 suffix 结束，如果是，返回 <code>True</code>,否则返回 <code>False</code>。</td></tr><tr><td style="text-align:left;"><code>expandtabs(tabsize=8)</code></td><td style="text-align:left;">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td></tr><tr><td style="text-align:left;"><code>find(str, beg=0, end=len(string))</code></td><td style="text-align:left;">检测 str 是否包含在字符串中，如果指定范围 <code>beg</code> 和 <code>end</code> ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回<code>-1</code></td></tr><tr><td style="text-align:left;"><code>index(str, beg=0, end=len(string))</code></td><td style="text-align:left;">跟find()方法一样，只不过如果str不在字符串中会报一个异常。</td></tr><tr><td style="text-align:left;"><code>isalnum()</code></td><td style="text-align:left;">如果字符串<code>至少有一个字符并且所有字符都是字母或数字</code>则返 回 True，否则返回 False</td></tr><tr><td style="text-align:left;"><code>isalpha()</code></td><td style="text-align:left;">如果字符串<code>至少有一个字符并且所有字符都是字母或中文字</code>则返回 True, 否则返回 False</td></tr><tr><td style="text-align:left;"><code>isdigit()</code></td><td style="text-align:left;">如果字符串<code>只包含数字</code>则返回 True 否则返回 False..<code>isdigit() 方法只对正整数有效，负数及小数均返回不正确</code>。</td></tr><tr><td style="text-align:left;"><code>islower()</code></td><td style="text-align:left;">如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left;"><code>isnumeric()</code></td><td style="text-align:left;">如果字符串中<code>只包含数字字符</code>，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left;"><code>isspace()</code></td><td style="text-align:left;">如果字符串中只包含空白，则返回 True，否则返回 False.</td></tr><tr><td style="text-align:left;"><code>istitle()</code></td><td style="text-align:left;">如果字符串是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td style="text-align:left;"><code>isupper()</code></td><td style="text-align:left;">如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left;"><code>join(seq)</code></td><td style="text-align:left;">以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)<code>合并为一个新的字符串</code></td></tr><tr><td style="text-align:left;"><code>len(string)</code></td><td style="text-align:left;">返回字符串长度</td></tr><tr><td style="text-align:left;"><code>ljust(width[, fillchar\\])</code></td><td style="text-align:left;">返回一个原字符串左对齐,并使用 <code>fillchar</code> 填充至长度 <code>width</code> 的新字符串，<code>fillchar 默认为空格</code>。</td></tr><tr><td style="text-align:left;"><code>lower()</code></td><td style="text-align:left;">转换字符串中所有大写字符为小写.</td></tr><tr><td style="text-align:left;"><code>lstrip()</code></td><td style="text-align:left;">截掉字符串左边的空格或指定字符。</td></tr><tr><td style="text-align:left;"><code>maketrans()</code></td><td style="text-align:left;">创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td style="text-align:left;"><code>max(str)</code></td><td style="text-align:left;">返回字符串 str 中最大的字母。</td></tr><tr><td style="text-align:left;"><code>min(str)</code></td><td style="text-align:left;">返回字符串 str 中最小的字母。</td></tr><tr><td style="text-align:left;"><code>replace(old, new [, max\\])</code></td><td style="text-align:left;">把将字符串中的 <code>old</code> 替换成 <code>new</code>,如果 <code>max</code> 指定，则替换不超过 max 次。</td></tr><tr><td style="text-align:left;"><code>rfind(str, beg=0,end=len(string)</code></td><td style="text-align:left;">类似于 find()函数，不过是<code>从右边开始查找</code>.</td></tr><tr><td style="text-align:left;"><code>rindex( str, beg=0, end=len(string))</code></td><td style="text-align:left;">类似于 index()，不过是<code>从右边开始</code>.</td></tr><tr><td style="text-align:left;"><code>rjust(width,[, fillchar\\])</code></td><td style="text-align:left;">返回一个原字符串右对齐,并使用fillchar（默认空格）填充至长度 width 的新字符串</td></tr><tr><td style="text-align:left;"><code>rstrip()</code></td><td style="text-align:left;">删除字符串末尾的空格或指定字符。</td></tr><tr><td style="text-align:left;"><code>split(str=&quot;&quot;, num=string.count(str))</code></td><td style="text-align:left;">以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td></tr><tr><td style="text-align:left;"><code>splitlines([keepends\\])</code></td><td style="text-align:left;">按照行(&#39;\\r&#39;, &#39;\\r\\n&#39;, \\n&#39;)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td style="text-align:left;"><code>startswith(substr, beg=0,end=len(string))</code></td><td style="text-align:left;">检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg和end 指定值，则在指定范围内检查。</td></tr><tr><td style="text-align:left;"><code>strip([chars\\])</code></td><td style="text-align:left;">在字符串上执行 <code>lstrip()</code>和 <code>rstrip()</code></td></tr><tr><td style="text-align:left;"><code>swapcase()</code></td><td style="text-align:left;">将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td style="text-align:left;"><code>title()</code></td><td style="text-align:left;">返回&quot;标题化&quot;的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td style="text-align:left;"><code>translate(table, deletechars=&quot;&quot;)</code></td><td style="text-align:left;">根据 table 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletec数中</td></tr><tr><td style="text-align:left;"><code>upper()</code></td><td style="text-align:left;">转换字符串中的小写字母为大写</td></tr><tr><td style="text-align:left;"><code>zfill (width)</code></td><td style="text-align:left;">返回长度为 <code>width</code> 的字符串，原字符串右对齐，前面填充0</td></tr><tr><td style="text-align:left;"><code>isdecimal()</code></td><td style="text-align:left;">检查字符串<code>是否只包含十进制字符</code>，如果是返回 true，否则返回 false。</td></tr></tbody></table>`,31),a=[i];function n(r,o,c,h,p,g){return l(),e("div",null,a)}const f=t(d,[["render",n]]);export{k as __pageData,f as default};
