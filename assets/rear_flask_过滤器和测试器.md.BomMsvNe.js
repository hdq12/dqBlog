import{_ as s,c as i,o as a,V as e}from"./chunks/framework.szLWUyCm.js";const u=JSON.parse('{"title":"二、过滤器和测试器","description":"","frontmatter":{},"headers":[],"relativePath":"rear/flask/过滤器和测试器.md","filePath":"rear/flask/过滤器和测试器.md","lastUpdated":null}'),t={name:"rear/flask/过滤器和测试器.md"},l=e(`<h1 id="二、过滤器和测试器" tabindex="-1">二、过滤器和测试器 <a class="header-anchor" href="#二、过滤器和测试器" aria-label="Permalink to &quot;二、过滤器和测试器&quot;">​</a></h1><blockquote><p>在模板中，过滤器实现对某个变量进行处理，通过管道符号（<code>|</code>）调用</p></blockquote><p>例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length}}   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回name的长度</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="一、自定义过滤器" tabindex="-1">一、自定义过滤器 <a class="header-anchor" href="#一、自定义过滤器" aria-label="Permalink to &quot;一、自定义过滤器&quot;">​</a></h2><blockquote><p>过滤器本质是python的函数，它会把被过滤的值当作第一个参数传给这个函数，经过一些逻辑处理后，在返回新的值。</p><p>过滤器函数写好后可以通过<code>@app.template_filter</code>装饰器或者<code>app.add_template_filter</code>函数把函数注册为<code>JinJa2</code>能用的过滤器</p></blockquote><p>1、使用<code>app.add_template_filter</code>注册过滤器</p><blockquote><p>app.add_template_filter(被注册的函数,&quot;注册的过滤器名字&quot;)</p></blockquote><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> datetime_format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value,format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%Y-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-%m %H:%M&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.strftime(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.add_template_filter(datetime_format,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dformat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{article.date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dformat}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{article.date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dformat(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Y)}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2、使用<code>@app.template_filter</code>注册过滤器</p><blockquote><p>@app.template_filter(&quot;过滤器名字&quot;)</p></blockquote><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.template_filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dformat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> datetime_format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value,format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%Y-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-%m %H:%M&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.strftime(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="二、jinja2内置过滤器" tabindex="-1">二、Jinja2内置过滤器 <a class="header-anchor" href="#二、jinja2内置过滤器" aria-label="Permalink to &quot;二、Jinja2内置过滤器&quot;">​</a></h2><ol><li><p><code>abs(value)</code>：获取 <code>value</code> 的绝对值。</p></li><li><p><code>default(value,default_1value,boolean=False)</code>：如果 <code>value </code>没有定义，则返回第2个参数 <code>default_value</code></p><ol><li>当<code>boolean</code> 参数为<code>False</code>时，如果 <code>value</code> 被判断为<code>False</code> ，则返回<code>default_value</code></li><li>当 <code>boolean</code> 参数为 <code>True</code> 时，无论 <code>value</code> 是什么，都会返回 <code>default value</code></li></ol></li><li><p><code>escape(value)</code>：将一些特殊字符，如&amp;、&lt;、&gt;、“、‘进行转义。因为 Jimja2 默认开启了全局转义，所以在大部分情况下无须手动使用这个过滤器去转义，只有在关闭了转义的情况下，会需要使用到它</p></li><li><p><code>filesizeformat(value,binary=False)</code>： 过滤器将字节大小转换为易读的格式</p><ol><li><code>binary=False</code>：以 1000 为基础进行计算，1 KB = 1000 bytes，1 MB = 1000 KB，1 GB = 1000 MB</li><li><code>binary=True</code>：以 1024 为基础进行计算，1 KiB = 1024 bytes，1 MiB = 1024 KiB，1 GiB = 1024 MiB</li></ol></li><li><p><code>frist(value)</code>：返回 value 序列的第1个元素</p></li><li><p><code>float(value,default=0.0)</code>：将value 转换为浮点类型，如果转换失败会返回0.0</p></li><li><p><code>format(value,*args,**kwargs)</code>：格式化字符串</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">!</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 假设 message 是一个需要格式化的字符串 </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">!</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 过滤器格式化字符串 </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><code>groupby(value,attribute,default-None)</code>：value 是一个序列，可以使用参数 attribute进行分组</p><p>例如，有一个uses 列表，里面的user 都有一个 city 属性，如果要按照 city进行分组</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupby(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ group.grouper }}:{{ group.list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">join(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endfor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li><code>group.grouper</code>：在每个分组中，<code>grouper</code> 属性表示当前分组的标签，即按照哪个属性进行了分组。在这里，它代表了城市的名称</li><li><code>group.list</code>：这是当前分组中所有元素的列表</li></ol></li><li><p><code>int(value,default-0,base=10)</code>：转换为整型，如果转换失败会返回<code>0</code>，并且默认按照十进制转换</p></li><li><p><code>join(value,attribute)</code>:使用 <code>attribute</code> 指定的元素，将一个序列拼接成一个字符串</p></li><li><p><code>last(value)</code>：返回 value 序列的最后一个元素</p></li><li><p><code>length(value)</code>:返回 value 序列的长度</p></li><li><p><code>list(value)</code>：换 value 为一个列表</p></li><li><p><code>1ower(value)</code>：将value 全部转换为小写</p><ol><li><p>如要将 titles 序列中每个元素的值都变成小写形式，那么可以使用以下代码实现</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ titles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lower&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol></li><li><p><code>map(value,*args,**kwargs)</code>：将 value 这个序列都执行某个操作</p><ol><li><p>如获取 users这个序列中每个user 的 <code>username</code> 字段</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol></li><li><p><code>max(value)</code>：求序列中的最大值</p></li><li><p><code>min(value)</code>：求序列中的最小值</p></li><li><p><code>random(value)</code>:返回 value 这个序列中的一个随机值</p></li><li><p><code>reject(value,*args,**kwargs)</code>:过滤 value 这个序列中的一些元素，过滤的条件通过后面的参数给定。如要过滤列表中所有的奇数，可以把Jinja2中内置的 <code>odd</code> 过滤器传给reject 过滤器来实现，</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ numbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reject(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;odd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><code>rejectattr(value,*args,**kwargs)</code>：根据 value 序列中元素的<code>某个属性</code>进行过滤,只要这个属性满足条件，那么就会被过滤掉</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rejectattr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;is_active&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rejectattr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;none&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>第1行代码是过滤users 中is_active为True 的对象，第2行代码是过滤 users 中email为none 的对象</p></li><li><p><code>replace(value,old,new,count)</code>：将字符串value 中的old 替换为new，并且可以通过 count 来确定替换多少个</p></li><li><p><code>reverse(value)</code>：将value 这个列逆序</p></li><li><p><code>safe(value)</code>：在渲染 value 时，关闭自动转义</p></li><li><p><code>select(value,*args,**kwargs)</code>:选择 value 序列中满足条件的元素，与reject 正好相反</p></li><li><p><code>selectattr(value,*args,**kwargs)</code>：根据 value 列中元素的某个属性进行过滤,留下满足条件的，过滤掉不满足条件的，与\`\`rejectattr\` 正好相反</p></li><li><p><code>sort(value,reverse=False,case_sensitive=False,attribute=None)</code>：将value 这个序列进行排序</p><ol><li><code>reverse</code> 代表是否逆向排序</li><li><code>case_sensitive</code>代表是否忽略大小写</li><li><code>attribute</code> 代表根据value 列中元素的某个属性排序</li></ol></li><li><p><code>string(value)</code>：将value 转换为字符串类型</p></li><li><p><code>striptags(value)</code>：将字符串 value 中的 HTMI, 标签去除，留下文本内容</p></li><li><p><code>tojson(value)</code>：将value 转换为JSON 格式的字符串</p></li><li><p><code>trim(value)</code>：删除value 前面和后面的空白字符(空格)</p></li><li><p><code>truncate(value,length=255,killwords=False,end=&quot;..&quot;)</code></p><ol><li><p><code>value</code>：要截取的字符串</p></li><li><p><code>length</code>：要保留的字符长度，默认为255</p></li><li><p><code>killwords</code>：布尔值，表示在截取字符串时是否要裁剪单词，默认为False。如果设置为True，则截取的字符串可能会在单词中断，而不是在单词之间断开</p></li><li><p><code>end</code>：末尾的结束字符，默认为&quot;..”</p><blockquote><p>如果<code>killwords</code>参数为<code>false</code>，并且在截取到指定长度时单词尚未截完，则截取器将继续向后截取，直到当前单词结束。因此，即使在长度为200时截取到单词尚未结束，截取器也会继续截取该单词，直到完整的单词结束或达到字符串的末尾</p></blockquote></li></ol></li><li><p><code>unique(value,case sensitive=False,attribute=None)</code>：将value 序列中的重复元素删除</p><ol><li><code>case_sensitive</code>代表是否忽略大小写</li><li><code>attribute</code>代表使用 value 序列中元素的某个属性</li></ol></li><li><p><code>upper(value)</code>：将value 所有字符全部转换为大写</p></li><li><p><code>urlencode(value)</code>：如果 value 是字符串，那么底层会调用 Python 的 <code>urllib.parse.quote</code>;如果 value 是字典，那么底层会调用Python的<code>urlen.parse.urlencode</code></p></li><li><p><code>urlize(value,trim_url_limit=None,nofollow=False,target=None,rel=None,extra_schemes=None)</code>：将 value 变成可以单击的链接，如URL 和邮箱。注意：value 必须是以<code>http://</code>、<code>https://</code>、<code>www.</code>、<code>mailto</code> 开头的字符串</p></li><li><p><code>wordcount(value)</code>：统计value 中共有多少个单词</p></li><li><p><code>xmlattr(value,autospace=True)</code>：value 为一个字典，根据这个字典创建一个 <code>xml格式</code>的属性</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		 &#39;missing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: none,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		 &#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;list-&amp;d&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(variable)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xmlattr </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   &gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ol><h2 id="三、测试器" tabindex="-1">三、测试器 <a class="header-anchor" href="#三、测试器" aria-label="Permalink to &quot;三、测试器&quot;">​</a></h2><table><thead><tr><th>测试器</th><th>描述</th></tr></thead><tbody><tr><td><code>boolean</code></td><td>是否为布尔类型</td></tr><tr><td><code>callable</code></td><td>是否能被调用</td></tr><tr><td><code>defined</code></td><td>是否定义</td></tr><tr><td><code>divisibleby</code></td><td>是否能被某个数整除</td></tr><tr><td><code>eq</code></td><td>是否和另外一个值相等</td></tr><tr><td><code>еscaped</code></td><td>是否已经被转义</td></tr><tr><td><code>even</code></td><td>是否为偶数</td></tr><tr><td><code>false</code></td><td>是否为False</td></tr><tr><td><code>filter</code></td><td>是否为过滤器</td></tr><tr><td><code>float</code></td><td>是否为浮点类型</td></tr><tr><td><code>ge</code></td><td>是否大于或等于某个数</td></tr><tr><td><code>gt</code></td><td>是否大于某个数</td></tr><tr><td><code>in</code></td><td>是否在某个序列中，与 Python 中的in语法类似</td></tr><tr><td><code>integer</code></td><td>是否为整型</td></tr><tr><td><code>iterable</code></td><td>是否为可迭代类型</td></tr><tr><td><code>le</code></td><td>是否小于或等于某个数</td></tr><tr><td><code>lower</code></td><td>是否全部为小写</td></tr><tr><td><code>lt</code></td><td>是否小于某个数</td></tr><tr><td><code>mapping</code></td><td>是否为一个 mapping 对象(如字典)</td></tr><tr><td><code>ne</code></td><td>是否不等于某个数</td></tr><tr><td><code>none</code></td><td>是否为 None</td></tr><tr><td><code>number</code></td><td>是否为数值类型</td></tr><tr><td><code>odd</code></td><td>是否为奇数</td></tr><tr><td><code>sameas</code></td><td>是否在内存中和另外一个对象是一样的</td></tr><tr><td><code>sequence</code></td><td>是否为序列(如列表、元组)</td></tr><tr><td><code>string</code></td><td>是否为字符串</td></tr><tr><td><code>test</code></td><td>是否为一个测试器</td></tr><tr><td><code>true</code></td><td>是否为 True</td></tr><tr><td><code>undefined</code></td><td>是否没有定义</td></tr><tr><td><code>upper</code></td><td>是否全部为大写</td></tr></tbody></table>`,17),n=[l];function p(d,h,r,k,o,c){return a(),i("div",null,n)}const g=s(t,[["render",p]]);export{u as __pageData,g as default};
