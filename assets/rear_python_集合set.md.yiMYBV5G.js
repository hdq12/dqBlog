import{_ as t,c as e,o as s,V as a}from"./chunks/framework.szLWUyCm.js";const u=JSON.parse('{"title":"八、集合set","description":"","frontmatter":{},"headers":[],"relativePath":"rear/python/集合set.md","filePath":"rear/python/集合set.md","lastUpdated":null}'),i={name:"rear/python/集合set.md"},l=a(`<h1 id="八、集合set" tabindex="-1">八、集合set <a class="header-anchor" href="#八、集合set" aria-label="Permalink to &quot;八、集合set&quot;">​</a></h1><blockquote><ol><li>集合（set）是一个无序的不重复元素序列</li><li>集合中的元素不会重复</li></ol></blockquote><h2 id="_1、创建集合" tabindex="-1">1、创建集合 <a class="header-anchor" href="#_1、创建集合" aria-label="Permalink to &quot;1、创建集合&quot;">​</a></h2><blockquote><p>创建集合使用<code>set()</code>，不能使用<code>{}</code>，因为<code>{}</code>是创建字典的</p></blockquote><h2 id="_2、添加元素" tabindex="-1">2、添加元素 <a class="header-anchor" href="#_2、添加元素" aria-label="Permalink to &quot;2、添加元素&quot;">​</a></h2><p><strong>语法格式如下：</strong></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.add( x )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</p><p>还有一种添加方式，参数是<code>列表，元组，字典等</code></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thisset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Google&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Runoob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Taobao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thisset.update({</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisset)				</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#{1, 3, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thisset.update([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisset)				</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#{1, 3, 4, 5, 6, &#39;Google&#39;, &#39;Taobao&#39;, &#39;Runoob&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3、删除元素" tabindex="-1">3、删除元素 <a class="header-anchor" href="#_3、删除元素" aria-label="Permalink to &quot;3、删除元素&quot;">​</a></h2><ul><li>remove</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.remove( x )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</p><ul><li>discard</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.discard( x )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>移除集合中的元素，且如果元素不存在，不会发生错误</p><ul><li>pop</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.pop()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>随机删除集合中的一个元素</p><blockquote><p>多次执行测试结果都不一样。</p><p>set 集合的 pop 方法会对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除</p></blockquote><h2 id="_4、判断元素是否在集合中存在" tabindex="-1">4、判断元素是否在集合中存在 <a class="header-anchor" href="#_4、判断元素是否在集合中存在" aria-label="Permalink to &quot;4、判断元素是否在集合中存在&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>x in s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False。</p><h2 id="_5、集合内置方法" tabindex="-1">5、集合内置方法 <a class="header-anchor" href="#_5、集合内置方法" aria-label="Permalink to &quot;5、集合内置方法&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>add()</code></td><td style="text-align:left;">为集合添加元素</td></tr><tr><td style="text-align:left;"><code>clear()</code></td><td style="text-align:left;">移除集合中的所有元素</td></tr><tr><td style="text-align:left;"><code>copy()</code></td><td style="text-align:left;">拷贝一个集合</td></tr><tr><td style="text-align:left;"><code>difference()</code></td><td style="text-align:left;">返回多个集合的差集</td></tr><tr><td style="text-align:left;"><code>difference_update()</code></td><td style="text-align:left;">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td style="text-align:left;"><code>discard()</code></td><td style="text-align:left;">删除集合中指定的元素</td></tr><tr><td style="text-align:left;"><code>intersection()</code></td><td style="text-align:left;">返回集合的交集</td></tr><tr><td style="text-align:left;"><code>intersection_update()</code></td><td style="text-align:left;">返回集合的交集。</td></tr><tr><td style="text-align:left;"><code>isdisjoint()</code></td><td style="text-align:left;">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td style="text-align:left;"><code>issubset()</code></td><td style="text-align:left;">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td style="text-align:left;"><code>issuperset()</code></td><td style="text-align:left;">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td style="text-align:left;"><code>pop()</code></td><td style="text-align:left;">随机移除元素</td></tr><tr><td style="text-align:left;"><code>remove()</code></td><td style="text-align:left;">移除指定元素</td></tr><tr><td style="text-align:left;"><code>symmetric_difference()</code></td><td style="text-align:left;">返回两个集合中不重复的元素集合。</td></tr><tr><td style="text-align:left;"><code>symmetric_difference_update()</code></td><td style="text-align:left;">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td style="text-align:left;"><code>union()</code></td><td style="text-align:left;">返回两个集合的并集</td></tr><tr><td style="text-align:left;"><code>update()</code></td><td style="text-align:left;">给集合添加元素</td></tr><tr><td style="text-align:left;"><code>len()</code></td><td style="text-align:left;">计算集合元素个数</td></tr></tbody></table>`,26),n=[l];function d(p,r,o,h,c,k){return s(),e("div",null,n)}const y=t(i,[["render",d]]);export{u as __pageData,y as default};
