import{_ as t,c as s,o as a,V as i}from"./chunks/framework.szLWUyCm.js";const b=JSON.parse('{"title":"二、ORM模型","description":"","frontmatter":{},"headers":[],"relativePath":"rear/flask/ORM模型.md","filePath":"rear/flask/ORM模型.md","lastUpdated":null}'),e={name:"rear/flask/ORM模型.md"},d=i(`<h1 id="二、orm模型" tabindex="-1">二、ORM模型 <a class="header-anchor" href="#二、orm模型" aria-label="Permalink to &quot;二、ORM模型&quot;">​</a></h1><blockquote><ol><li>对象关系映射(<code>object relationship mapping</code>，简称 ORM)是一种可以用 Python 面向对象的方式来操作关系型数据库的技术，具有可以映射到数据库表能力的Python 类我们称之为 <code>ORM 模型</code></li><li>一个 ORM 模型与数据库中的一个表相对应，ORM 模型中的每个类属性分别对应表的每个字段</li><li>ORM 模型的每个实例对象对应表中的每条记录</li></ol></blockquote><h2 id="一、通过orm模型创建表" tabindex="-1">一、通过ORM模型创建表 <a class="header-anchor" href="#一、通过orm模型创建表" aria-label="Permalink to &quot;一、通过ORM模型创建表&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    __tablename__ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;user&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.Column(db.Integer, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">autoincrement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">primary_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.Column(db.String(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nullable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.Column(db.String(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nullable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    db.create_all()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_1、flask-sqlalchemy字段类型" tabindex="-1">1、Flask-SQLAlchemy字段类型 <a class="header-anchor" href="#_1、flask-sqlalchemy字段类型" aria-label="Permalink to &quot;1、Flask-SQLAlchemy字段类型&quot;">​</a></h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>db.Integer</code></td><td>整型。范围与数据库一致</td></tr><tr><td><code>db.SmallInteger</code></td><td>小整型。范围与数据库一致</td></tr><tr><td><code>db.BigInteger</code></td><td>长整型。范围与数据库一致</td></tr><tr><td><code>db.Decimal</code></td><td>定点类型。可以指定总长度和小数点后位数</td></tr><tr><td><code>db.Boolean</code></td><td>布尔类型</td></tr><tr><td><code>db.Date</code></td><td>日期类型。存储 Python 中的 <code>datetime.date</code> 对象</td></tr><tr><td><code>db.DateTime</code></td><td>日期时间类型。存储 Python 中的 <code>datetime.datetime</code> 对象</td></tr><tr><td><code>db.Time</code></td><td>时间类型。存储Python中的<code>datetime.time</code> 对象</td></tr><tr><td><code>db.Interval</code></td><td>时间间隔。存储Python 中的 <code>datetime.timedelay</code> 对象</td></tr><tr><td><code>db.String</code></td><td>字符串类型。使用时需要指定长度，不能超过 255个字符</td></tr><tr><td><code>db.Text</code></td><td>文本类型。常用于字符串长度不可控的情况</td></tr><tr><td><code>db.Enum</code></td><td>枚举类型</td></tr><tr><td><code>db PickleType</code></td><td>存储经过 <code>Pickle</code> 后的对象</td></tr><tr><td><code>db.LargeBinary</code></td><td>存储二进制数据</td></tr></tbody></table><h3 id="_2、db-column常用参数" tabindex="-1">2、db.Column常用参数 <a class="header-anchor" href="#_2、db-column常用参数" aria-label="Permalink to &quot;2、db.Column常用参数&quot;">​</a></h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>name</code></td><td>字段在数据库表中的名称。如果没有设置，则使用此属性名作为字段名称</td></tr><tr><td><code>type</code></td><td>字段类型</td></tr><tr><td><code>autoincrement</code></td><td>自动增长</td></tr><tr><td><code>default</code></td><td>默认值</td></tr><tr><td><code>index</code></td><td>如果设置为 <code>True</code>，则将此字段设置为索引</td></tr><tr><td><code>nullable</code></td><td>是否为空</td></tr><tr><td><code>onupdate</code></td><td>在修改对象时，会自动使用这个属性指定的值</td></tr><tr><td><code>primary_key</code></td><td>主键</td></tr><tr><td><code>unigue</code></td><td>如果设置为<code>True</code>，则此字段的值必须唯一</td></tr><tr><td><code>conment</code></td><td>在创建表时的注释</td></tr></tbody></table>`,8),n=[d];function l(r,h,p,o,k,c){return a(),s("div",null,n)}const y=t(e,[["render",l]]);export{b as __pageData,y as default};
